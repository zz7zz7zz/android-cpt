plugins {
    id 'com.android.application'
}
apply from: 'build_flavor.gradle'
apply plugin: 'com.alibaba.arouter'

apply plugin: 'com.module.plugin.cpt'
cptConfig{
    applicationName = "com.module.main.App"
}

android {
    compileSdkVersion       androidConfig.compileSdkVersion
    buildToolsVersion       androidConfig.buildToolsVersion

    defaultConfig {

        applicationId       applicationIdConfig.app

        minSdkVersion       androidConfig.minSdkVersion
        targetSdkVersion    androidConfig.targetSdkVersion
        versionCode         androidConfig.versionCode
        versionName         androidConfig.versionName

        multiDexEnabled     true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
    }

    packagingOptions {
        pickFirst 'lib/x86/libsignature.so'
        pickFirst 'lib/armeabi-v7a/libsignature.so'

//            merge 'lib/x86/libsignature.so'
//            merge 'lib/armeabi-v7a/libsignature.so'

//          exclude 'lib/x86/libsignature.so'
//          exclude 'lib/armeabi-v7a/libsignature.so'
    }

    signingConfigs {

//        signConfig.each {k,v ->
//            println(k + " : ")
//            v.each {k1,v1 ->
//                println(" "+k1 + " " + v1)
//            }
//        }

//        debug{
//            keyAlias      signConfig.debug.keyAlias
//            keyPassword   signConfig.debug.keyPassword
//            storeFile     file(signConfig.debug.storeFile)
//            storePassword signConfig.debug.storePassword
//        }
//
//        release{
//            keyAlias      signConfig.release.keyAlias
//            keyPassword   signConfig.release.keyPassword
//            storeFile     file(signConfig.release.storeFile)
//            storePassword signConfig.release.storePassword
//        }
//
//        release2{
//            keyAlias      signConfig.release2.keyAlias
//            keyPassword   signConfig.release2.keyPassword
//            storeFile     file(signConfig.release2.storeFile)
//            storePassword signConfig.release2.storePassword
//        }

//        println(" ----- debug ----- " + signEnableConfig.debug)
//        println(" ----- release ----- " + signEnableConfig.release)
//        println(" ----- release2 ----- " + signEnableConfig.release2)

        if(signEnableConfig.debug){
            debug{
                keyAlias      signConfig.debug.keyAlias
                keyPassword   signConfig.debug.keyPassword
                storeFile     file(signConfig.debug.storeFile)
                storePassword signConfig.debug.storePassword
            }
        }

        if(signEnableConfig.release){
            release{
                keyAlias      signConfig.release.keyAlias
                keyPassword   signConfig.release.keyPassword
                storeFile     file(signConfig.release.storeFile)
                storePassword signConfig.release.storePassword
            }
        }

        if(signEnableConfig.release2){
            release2{
                keyAlias      signConfig.release2.keyAlias
                keyPassword   signConfig.release2.keyPassword
                storeFile     file(signConfig.release2.storeFile)
                storePassword signConfig.release2.storePassword
            }
        }
    }

    buildTypes {

//        debug {
//            minifyEnabled false
//            shrinkResources false
//            zipAlignEnabled false
//            signingConfig signingConfigs.debug
//        }
//
//        release {
//            // 是否混淆
//            minifyEnabled true
//            // 移除无用的resource文件
//            shrinkResources true
//            // 是否zip对齐
//            zipAlignEnabled true
//            signingConfig signingConfigs.release
//
//            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
//        }
//
//        release2.initWith(buildTypes.release)
//        release2 {
//            signingConfig signingConfigs.release2
//            matchingFallbacks = ['release','debug']
//        }

        if(signEnableConfig.debug){
            debug {
                minifyEnabled false
                shrinkResources false
                zipAlignEnabled false
                signingConfig signingConfigs.debug
            }
        }

        if(signEnableConfig.release){
            release {
                // 是否混淆
                minifyEnabled true
                // 移除无用的resource文件
                shrinkResources true
                // 是否zip对齐
                zipAlignEnabled true
                signingConfig signingConfigs.release
                matchingFallbacks = ['release','debug']

                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                multiDexKeepProguard file('multidex-config.pro')
            }
        }

        if(signEnableConfig.release2){
            release2 {
                // 是否混淆
                minifyEnabled true
                // 移除无用的resource文件
                shrinkResources true
                // 是否zip对齐
                zipAlignEnabled true
                signingConfig signingConfigs.release2
                matchingFallbacks = ['release','debug']

                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                multiDexKeepProguard file('multidex-config.pro')
            }
        }


        android.applicationVariants.all { variant ->
            variant.outputs.all {
                def productName = variant.productFlavors.get(1).name // flavor维度1的名字
                def channelName = variant.productFlavors.get(0).name // flavor维度2的名字
                def versionName = variant.versionName
                def buildType = variant.buildType.name

                if (outputFileName != null && outputFileName.endsWith('.apk')) {
                    // 输出apk名称为 weixin_gp_1.0_release_2021.01.01-11:59:59.apk
                    def apkName = "${productName}_${channelName}_${versionName}_${buildType}_${getBuildTime()}.apk"
                    outputFileName = apkName
                }else if (outputFileName != null && outputFileName.endsWith('.aab')){
                    // 输出aab名称为weixin_gp_1.0_release_2021.01.01-11:59:59.aab
                    def aabName = "${productName}_${channelName}_${versionName}_${buildType}_${getBuildTime()}.aab"
                    outputFileName = aabName
                }
            }
        }

    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {

    dependenciesConfig.each {k,v -> implementation v}

    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    //基类库
    implementation project(':app_core')

    annotationProcessor 'com.alibaba:arouter-compiler:1.5.1'
}





//--------------------------------- 统计编译时长 ---------------------------------
import java.time.Clock
class Clock {
    long startTimeInMs

    Clock() {
        this(System.currentTimeMillis())
    }

    Clock(long startTimeInMs) {
        this.startTimeInMs = startTimeInMs
    }

    long getTimeInMs() {
        return System.currentTimeMillis() - startTimeInMs
    }
}
public class BuildTimeListener implements TaskExecutionListener, BuildListener {
    private Clock clock
    private times = []

    @Override
    void beforeExecute(Task task) {
//        clock = new org.gradle.util.Clock()
        clock = new Clock()

    }

    @Override
    void afterExecute(Task task, TaskState taskState) {
//        def ms = clock.timeInMs
        def ms = clock.getTimeInMs();
        times.add([ms, task.path])

        //task.project.logger.warn "${task.path} spend ${ms}ms"
    }

    @Override
    void buildFinished(BuildResult result) {
        println "Task spend time:"

        //总时间
        def all_cost = 0

        for (time in times) {
            all_cost += time[0]
            if (time[0] >= 50) {
                printf "%7sms  %s\n", time
            }
        }

        println "Task spend time all: " + all_cost + " ms"
    }

    @Override
    void beforeSettings(Settings settings) {
        super.beforeSettings(settings)
    }

    @Override
    void buildStarted(Gradle gradle) {

    }

    @Override
    void settingsEvaluated(Settings settings) {

    }

    @Override
    void projectsLoaded(Gradle gradle) {

    }

    @Override
    void projectsEvaluated(Gradle gradle) {

    }
}

project.gradle.addListener(new BuildTimeListener())